%h1 PostgreSQL, Ruby, Rails, Passenger, and Apache2

%p
  Welcome to the second post by RubyRevealed! This is part of a series of blog posts that will detail the steps
  we took to create this website you are reading. If you missed the first post, you can
  = link_to 'find it here.', '/archive/first_post.html'
  The first post details each step to get a static html document up and running. Now it is time to get to the good stuff.

%p
  If you notice any errata in the following, please let us know at <strong>aa@rubyrevealed.com</strong>.

%h2 PostgreSQL
%p
  We'll start by installing <strong><a href="http://www.postgresql.org/">PostgreSQL</a></strong> on the remote machine.
  SSH into your machine like you did before, with your remote ip-address or domain name.

%pre.prettyprint.lang-sh
  $ ssh root@[ip-address]

%p
  Follow <a href="http://hendrelouw73.wordpress.com/2012/11/14/how-to-install-postgresql-9-1-on-ubuntu-12-10-linux/">this guide</a>
  for getting PostgreSQL installed on the remote Ubuntu machine.

  Our application will run on the same server as the database for now, so postgres will only accept connections from
  <code>localhost</code>.

%h2 Install Rails, Apache, MySQL, and Passenger
%p
  MySQL? What? You just said we just got done installing PostgreSQL. Well yes, we did. And we're not going to use MySQL.
  For simplicity, we're going to run a script that will install everything we need, and MySQL just so happens to be in
  the package. Most of the following steps come from
  <a href="https://www.digitalocean.com/community/articles/how-to-install-rails-apache-and-mysql-on-ubuntu-with-passenger">this community article.</a>

%h3 Add a new Ubuntu User
%p
  We're going to want a new user to run our application, probably best not to do everything as <code>root</code>. Choose
  a username, for this blog, we'll use <code>app</code>, but you could simply choose your name if you desire. Right after
  creating the user, set their password.

%pre.prettyprint.lang-sh
  = preserve do
    $ useradd -m app
    $ passwd app
    \
    Enter new UNIX password:
    Retype new UNIX password:
    passwd: password updated successfully

%p
  The <code>-m</code> in the previous line will tell Ubuntu to also setup their home directory (<code>/home/app/</code>)
  with the correct permissions for the new user.

%p Next, add the new user to the list of sudoers.

%pre.prettyprint.lang-sh
  $ visudo

%p
  <strong>visudo</strong> opens up a file in VI, look for the following line.

%pre.prettyprint.lang-sh
  = preserve do
    \# User privilege specification
    root    ALL=(ALL:ALL) ALL

%p Make it look like the following, but remember to replace <code>app</code> with your user's name.

%pre.prettyprint.lang-sh
  = preserve do
    \# User privilege specification
    root    ALL=(ALL:ALL) ALL
    app     ALL=(ALL:ALL) ALL

%p
  Now save the file by pressing <strong>Ctrl+X</strong> then <strong>Y</strong> and the new user now has special powers.

%h2 /bin/bash it up
%p
  Alright, time to log out of the server as root, and hopefully not go back that way too often. SSH back in, but as
  the new user this time. Once you're logged in, we're going to change the default shell to be bash, to allow things
  like tab completion in the shell. When prompted, enter <strong>/bin/bash</strong>, as shown below. After changing the
  shell, you have to log out and log back in for it to take effect.

%pre.prettyprint.lang-sh
  = preserve do
    $ exit                    # Only if already logged in as root
    $ ssh app@[ip-address]
    $ chsh
    \
    Password:
    Changing the login shell for app
    Enter the new value, or press ENTER for the default
    \        Login Shell [/bin/sh]: <strong>/bin/bash</strong>
    \
    $ exit
    $ ssh app@[ip-address]

%p
  In order to later deploy our application, while logged in as app on the remote server, make a new directory to
  store our rails application. Also delete the first post and it's images we made previously, as we'll need that to be
  removed for us to display our rails app. We'll have you download a copy of it near the end of this post.

%pre.prettyprint-lang-sh
  = preserve do
    $ mkdir -p /var/www/app/rails
    $ rm /var/www/index.html
    $ rm -rf /var/www/images

%h2 Rails Ready
%p
  Go ahead and run the following script. It will install Ruby, Imagemagick, libs needed to run Rails, Bundler, Passenger,
  Rubygems, and Git.

%pre.prettyprint.lang-sh
  $ wget --no-check-certificate https://raw.github.com/joshfng/railsready/master/railsready.sh && bash railsready.sh

%p When prompted, we choose to install Ruby via RVM, option 2. Let it take it's time installing.

%p
  You can make sure you've got the essentials by doing these little tests, and ensure you have some output.

%pre.prettyprint.lang-sh
  = preserve do
    $ ruby -v
    ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-linux]
    \
    $ rvm list
    \
    rvm rubies
    \
    \=* ruby-2.0.0-p0 [ x86_64 ]
    \
    \# => - current
    \# =* - current && default
    \#  * - default

%p
  So if you're following the Digital Ocean article linked earlier, you might be running into problems when trying to
  get through the passenger apache2 installation. Quick research has shown this is due to using Ruby 2.0. So here's what
  we'll do to get it running. Instead of installing the passenger gem the typical way
  (<code>gem install passenger</code>), we are going to install the latest version (currently: 4.0.0.rc5) straight from
  the source. It doesn't matter where you put this gem, but we just threw it in the home directory.

%pre.prettyprint.lang-sh
  = preserve do
    $ cd ~                # If you're not familiar with tilde, ~ will take you to the /home/app directory
    $ git clone https://github.com/FooBarWidget/passenger.git
    $ cd passenger
    $ gem build passenger.gemspec
    $ gem install passenger-4.0.0.rc5.gem
    $ bin/passenger-install-apache2-module

%p
  After that installation, there are some lines you need to add to your apache2 configuration. These lines are specific
  to your user's name and the directory where you installed passenger, so copy them. So open that up with:

%pre.prettyprint.lang-sh
  $ sudo vim /etc/apache2/apache2.conf

.alert.alert-info.alert-block
  %button{type: 'button', class: 'close', data: { dismiss: 'alert' } } &times;
  %h4 Pro Tip: VIM
  %h5 Modes we will use
  %ul
    %li To go into <strong>INSERT</strong> mode, press <code>i</code>.
    %li To get back to <strong>NORMAL</strong> mode, press <code>ESC</code>.

  %h5 Navigation
  %p
    You can quickly jump around a file in VIM with the <code>G</code> key Yes, it needs to be a capital letter.
    Examples:
  %ul
    %li <code>1G</code> will take you to the first line.
    %li <code>25G</code> will take you to line 25.
    %li <code>G</code> by itself will take you to the last line.

%p
  Jump to the bottom of the file and add the lines you copied earlier, ours look like:

%pre.prettyprint.lang-sh
  = preserve do
    LoadModule passenger_module /home/app/passenger/libout/apache2/mod_passenger.so
    PassengerRoot /home/app/passenger
    PassengerRuby /home/app/.rvm/wrappers/ruby-2.0.0-p0/ruby

%p
  Save and exit by going into normal mode, then entering <code>:wq</code> and press <strong>ENTER</strong>.
  Now we need to restart the apache server.

%pre.prettyprint.lang-sh
  $ sudo service apache2 restart

%h2 Application Time
%p
  Okay, feel free to log out of SSH, we won't need it for awhile. Now we need to build the actual Rails application
  locally. This blog will assume that you already have Ruby / Ruby on Rails installed on your machine. If you don't,
  now is a good time to take a break from this blog, and go scavage the internet for how to install these.

%p
  Here are RubyRevealed, we love to use
  = link_to 'Rails Composer', 'http://railsapps.github.com/rails-composer/'
  by
  = link_to 'Daniel Kehoe.', 'https://twitter.com/danielkehoe'

  One of the best ways of doing that is to make magic happen everytime you create a new rails application. Open up
  your <code>.railsrc</code>.

%pre.prettyprint.lang-sh
  $ vim ~/.railsrc

Add this line:

%pre.prettyprint.lang-sh
  $ -T -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb

%p
  The <code>-T</code> tells Rails to ignore <code>Test::Unit</code> (we'll be using RSpec for testing in the not too distant future).
  The <code>-m url</code> tells rails to use Rails Composer to make our new application. So, let's do that now.

%pre.prettyprint.lang-sh
  = preserve do
    \# First <code>cd</code> into the directory you want your code to live in.
    $ rails new ruby_revealed

%p
  It will start by asking you some questions. Here are our responses, in order.

  %ul
    %li 1) I want to build my own application
    %li 1) WEBrick (default)
    %li 1) Same as development
    %li 2) PostgreSQL
    %li 2) Haml
    %li 2) RSpec
    %li 2) RSpec with Capybara
    %li 1) No Fixture Replacement
    %li 2) Twitter Bootstrap
    %li 2) Twitter Bootstrap (Sass)
    %li 1) No email support
    %li 1) No authentication
    %li 1) No authorization
    %li 2) SimpleForm
    %li 1) No starter app
    %li No banning robot.txt spiders
    %li No to creating a GitHub repo
    %li No environment variable management
    %li Yes to reduce assets logger during development
    %li Yes to use the better_errors gem
    %li no to creating project-specific .rvmrc file.
    %li Yes to adding therubyracer gem (since we are developing on Ubuntu locally)
    %li 'postgres' for the PostgreSQL username
    %li Yes to making 'postgres' have the superuser role.
    %li Yest to dropping an existing databases named 'ruby_revealed'

%p
  Whew, that was a lot of configuring. However, thankfully it does so much for us to make it worth it. Now we had some
  problems with our PostgreSQL installation on our development machine, so we purged it from our system entirely, and
  followed the
  = link_to 'same guide above', 'http://hendrelouw73.wordpress.com/2012/11/14/how-to-install-postgresql-9-1-on-ubuntu-12-10-linux/'
  to get it installed.

%p
  Once Postgres is installed and function, we need to modify the <code>config/database.yml</code> file.

%pre.prettyprint.lang-yml
  = preserve do
    \# config/database.yml
    \development:
    \  adapter: postgresql
    \  encoding: unicode
    \  database: ruby_revealed_development
    \  pool: 5
    \  username: postgres
    \  password:
    \
    \test:
    \  adapter: postgresql
    \  encoding: unicode
    \  database: ruby_revealed_test
    \  pool: 5
    \  username: postgres
    \  password:

%p
  Make sure you put in the password for the <strong>postgres</strong> user for your databases. Setup the database with:

%pre.prettyprint.lang-sh
  $ rake db:create     # Make sure you are in the root of your rails application

%p
  If that didn't return a response, then that means it worked like a charm.

%h2 Pretty Stuff
%p
  Let's cleanup our application's layout file. Make it look like:

%pre.prettyprint.lang-haml
  = preserve do
    <strong>app/views/layouts/application.html.haml</strong>
    \!!!
    \%html
    \  %head
    \    %title RubyRevealed
    \    = stylesheet_link_tag 'application', media: "all"
    \    = javascript_include_tag 'application'
    \    = csrf_meta_tags
    \
    \  %body
    \    .navbar.navbar-fixed-top
    \      %nav.navbar-inner
    \        .container
    \          = render 'layouts/navigation'
    \    #main
    \      .container
    \        .content
    \          .row
    \            .span12
    \              = render 'layouts/messages'
    \              = yield
    \          %footer
    \            %strong Created by Andy Davis & Adam Dalton
    \    = javascript_include_tag 'prettyify'

%p
  Note that <strong>#</strong> is not a commet in a <code>.haml</code> file. The first line above is just the file name,
  it is not part of the file contents.

%p
  Notice the 'prettyify' javascript include tag. Prettyify is going to let us add code snippets with some color.
  You'll need to
  = link_to 'download the JavaScript file', '/assets/prettyify.js'
  and put it in <code>/app/assets/javascripts</code>. While we're at it,
  = link_to 'download the CSS file too', '/assets/prettyify.css'
  and put that in <code>/app/assets/stylesheets</code>.

%p
  To finish up the prettyify, we need to add the stylesheet to the <code>app/assets/stylesheets/application.css.scss</code>
  file. Add the following line under the line, <code>*= require bootstrap_and_overrides</code>

%pre.prettyprint.lang-css
  \*= require prettyify

%p
  Next, let's add some code to make our 2nd blog post the static page that appears at the root. We'll just use the
  <code>ApplicationController</code> for now since we don't have a <code>BlogsController</code> yet.

%pre.prettyprint.lang-rb
  = preserve do
    \# app/controllers/application_controller.rb
    \class ApplicationController < ActionController::Base
    \  protect_from_forgery
    \
    \  def index
    \  end
    \
    \end

%p
  Set the root route in the routes file.

%pre.prettyprint.lang-rb
  = preserve do
    \# config/routes.rb
    \RubyRevealed::Application.routes.draw do
    \  root to: 'application#index'
    \end

Before we actually add the content of this blog post to the page, let's setup our deployment method.

%h2 GitHub
%p
  We host our code on GitHub, you can find our repository
  = link_to 'here.', 'https://github.com/rubyrevealed/ruby_revealed'

  You'll want to create a GitHub repo, there are lots of guides around that can show you how to do this, and attach it
  to your local code repository.

%h2 Capistrano
%p
  = link_to 'Capistrano', 'https://github.com/capistrano/capistrano'
  is a great gem that will let us easily deploy our application to our remote server we've prepared. Start by installing
  it.

%pre.prettyprint.lang-sh
  $ gem install capistrano

%p
  We found
  = link_to 'this Getting Started Guide', 'https://github.com/capistrano/capistrano/wiki/2.x-Getting-Started'
  from their wiki to be extremely useful. Capify your application (creates some files)

%pre.prettyprint.lang-sh
  $ capify .      # Again, from the application root directory

%p
  Now we need to modify the <code>config/deploy.rb</code> file it created to tell it where to deploy our code.

%pre.prettyprint
  = preserve do
    :escaped
      require 'rvm/capistrano'
      require 'bundler/capistrano'

      set :application, 'RubyRevealed'
      set :repository,  'git@github.com:rubyrevealed/ruby_revealed.git'

      set :scm, :git
      set :user, 'server'
      set :use_sudo, false

      default_run_options[:pty] = true

      set :keep_releases, 10
      set :deploy_to, "/var/www/apps/rails/\#{application}"

      server 'rubyrevealed.com', :app, :web, :db, primary: true

      namespace :deploy do
        task :symlink_shared, roles: :app do
         run "ln -s \#{shared_path}/config/database.yml \#{release_path}/config/database.yml"
        end

        task :precompile_assets, roles: :app do
          run "cd \#{release_path} && bundle exec rake assets:precompile RAILS_ENV=production"
        end

        task :restart do
          run "touch \#{current_path}/tmp/restart.txt"
        end
      end

      after 'deploy:symlink', 'deploy:symlink_shared'
      after 'deploy:symlink_shared', 'deploy:precompile_assets'

%p
  Add this to your Gemfile, and <code>bundle</code>.

%pre.prettyprint
  \gem 'rvm-capistrano'

%h2 The page you are reading
%p
  Okay, finally before we actually deploy, we need to add some content to our blog. We won't go into any depth on how
  it was created, simply because in the future, our blog posts will be dynamic, not staic html files. For now, download
  = link_to 'this index.html.haml file', '/archive/second_post.html.haml'
  and put it's content in <code>app/views/application/index.html.haml</code>.

%p
  Download our
  = link_to 'first_post.html', '/archive/first_post.html'
  and place it in <code>public/archive/</code>. (You'll need to create the <strong>archive</strong> directory)

%p
  Then download the images,
  = link_to 'droplet_image.png', '/images/droplet_image.png'
  and
  = link_to 'droplet_type.png', '/images/droplet_type.png'
  and place them in <code>public/images/</code>. (You'll need to create the <strong>images</strong> directory)

%h2 VirtualHost
%p
  In order to actually have your rails application show up when someone types in your domain name, you need to create
  a VirtualHost in your apache2 configuration. So open that up.

%pre.prettyprint.lang-sh
  = preserve do
    $ ssh app@[ip-address]
    $ sudo vim /etc/apache2/apache2.conf

%p
  Then add the following, but modified accordingly to the bottom.

%pre.prettyprint
  = preserve do
    :escaped
      # Setup VirtualHosts
      <VirtualHost *:80>
        ServerName rubyrevealed.com
        ServerAlias www.rubyrevealed.com
        DocumentRoot /var/www/apps/rails/RubyRevealed/current/public
        <Directory /var/www/apps/rails/RubyRevealed/current/public>
          # This relaxes Apache security settings
          AllowOverride all

          # MultiViews must be turned off.
          Options -MultiViews
        </Directory>
      </VirtualHost>

%p
  Save and exit, then restart apache.

%pre.prettyprint.lang-sh
  $ sudo service apache2 restart


%h2 Deploy
%p
  Add it to git and push, then deploy!

%pre.prettyprint.lang-sh
  = preserve do
    $ git add --all
    $ git push -u origin master
    $ cap deploy

%p
  If all went well, you should have your application successfully deployed to your remote server. Welcome to
  = link_to 'http://rubyrevealed.com.', 'http://rubyrevealed.com'